// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef SQUAREMOBILEPAYMENTSSDK_SWIFT_H
#define SQUAREMOBILEPAYMENTSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"



#if defined(__OBJC__)

@protocol SQMPSDKManager;
@class NSString;

/// Manages initialization for Mobile Payments SDK and provides access to the Authorization, Payment and Reader managers
/// warning:
///
/// You must initialize Mobile Payments SDK before attempting any other operation.
/// All methods in this class must be called from the main thread.
/// You cannot initalize Mobile Payments SDK multiple times.
SWIFT_CLASS_NAMED("MobilePaymentsSDK")
@interface SQMPMobilePaymentsSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <SQMPSDKManager> _Nonnull shared;)
+ (id <SQMPSDKManager> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Initializes Mobile Payments SDK.
/// Call this method from the <code>application:didFinishLaunchingWithOptions:</code> method in your AppDelegate.
/// warning:
///
/// You must initialize Mobile Payments SDK before attempting any other operation.
/// All methods in this class must be called from the main thread.
/// You cannot initalize Mobile Payments SDK multiple times.
+ (void)initializeWithApplicationLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)applicationLaunchOptions squareApplicationID:(NSString * _Nonnull)squareApplicationID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif

#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef MOBILEPAYMENTSSDKAPI_SWIFT_H
#define MOBILEPAYMENTSSDKAPI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"



#if defined(__OBJC__)
enum SQMPAdditionalPaymentMethodType : NSUInteger;
@class NSString;
@protocol SQMPPaymentSource;

/// The additional payment method that we are attempting to charge.
SWIFT_PROTOCOL_NAMED("AdditionalPaymentMethod")
@protocol SQMPAdditionalPaymentMethod <NSObject>
/// The type of the payment that is being presented
@property (nonatomic, readonly) enum SQMPAdditionalPaymentMethodType type;
/// Localized string value of the payment type that is consumer friendly
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Creates or begin a new payment using a provided Payment Source.
- (BOOL)triggerPaymentWith:(id <SQMPPaymentSource> _Nonnull)source error:(NSError * _Nullable * _Nullable)error;
@end

/// The Type of Payment that is about to take place.
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPAdditionalPaymentMethodType, "AdditionalPaymentMethodType", open) {
/// Instructs the SDK to begin a payment for a keyed in credit card.
  SQMPAdditionalPaymentMethodTypeKeyed = 0,
  SQMPAdditionalPaymentMethodTypeCardOnFile = 1,
  SQMPAdditionalPaymentMethodTypeHouseAccount = 2,
  SQMPAdditionalPaymentMethodTypeTapToPay = 3,
};


/// Additional payment methods supported by MobilePaymentsSDK
SWIFT_CLASS_NAMED("AdditionalPaymentMethods")
@interface SQMPAdditionalPaymentMethods : NSObject
/// Raw value of the alternate payment method.
@property (nonatomic, readonly) NSInteger rawValue;
/// Manual keyed entry
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SQMPAdditionalPaymentMethods * _Nonnull keyed;)
+ (SQMPAdditionalPaymentMethods * _Nonnull)keyed SWIFT_WARN_UNUSED_RESULT;
/// Convenience value to use all of the available <code>AdditionalPaymentMethods</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SQMPAdditionalPaymentMethods * _Nonnull all;)
+ (SQMPAdditionalPaymentMethods * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Convenience initializer to create <code>AdditionalPaymentMethods</code> from an array of values.
- (nonnull instancetype)init:(NSArray<SQMPAdditionalPaymentMethods *> * _Nonnull)additionalPaymentMethods;
/// Convenience initializer to create <code>AdditionalPaymentMethods</code> with no value.
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
/// Current value in String form.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Convenience method added because contains is not accessible in Objective-C
/// \param additionalPaymentMethods AdditionalPaymentMethods to check against
///
///
/// returns:
/// <code>true</code> if self contains the additionalPaymentMethods passed in the parameter
- (BOOL)contains:(SQMPAdditionalPaymentMethods * _Nonnull)additionalPaymentMethods SWIFT_WARN_UNUSED_RESULT;
@end


/// Errors that occur when authorization fails.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPAuthorizationError, "AuthorizationError", open) {
/// This device is already authorized with a Square account.
  SQMPAuthorizationErrorAlreadyAuthorized = 0,
/// An authorization is already in progress. Wait for this action to complete and try again.
  SQMPAuthorizationErrorAlreadyInProgress = 1,
/// The authorization code for this session was already used. Have the merchant reauthorize their Square account with your application.
  SQMPAuthorizationErrorAuthorizationCodeAlreadyRedeemed = 2,
/// A deauthorization is already in progress. Wait for this action to complete and try again.
  SQMPAuthorizationErrorDeauthorizationInProgress = 3,
/// The local device time is out of sync with the server time. Check your device’s time and attempt authorization again.
  SQMPAuthorizationErrorDeviceTimeDoesNotMatchServerTime = 4,
/// No access token was provided to the <code>AuthorizationManager</code>.
  SQMPAuthorizationErrorEmptyAccessToken = 5,
/// No location ID was provided to the <code>AuthorizationManager</code>.
  SQMPAuthorizationErrorEmptyLocationID = 6,
/// The authorization code for this session has expired. Have the merchant reauthorize their Square account with your application.
  SQMPAuthorizationErrorExpiredAuthorizationCode = 7,
/// The authorization code provided to the <code>AuthorizationManager</code> is invalid.
  SQMPAuthorizationErrorInvalidAuthorizationCode = 8,
/// The access token provided to the <code>AuthorizationManager</code> is invalid.
  SQMPAuthorizationErrorInvalidAccessToken = 9,
/// The location ID provided to the <code>AuthorizationManager</code> is invalid.
  SQMPAuthorizationErrorInvalidLocationID = 10,
/// The merchant’s location is not activated for credit card processing. Request the merchant reauthorize with another location ID.
  SQMPAuthorizationErrorLocationNotActivatedForCardProcessing = 11,
/// Mobile Payments SDK could not connect to the network.
  SQMPAuthorizationErrorNoNetwork = 12,
/// The merchant using your application is in a country unsupported by Mobile Payments SDK.
  SQMPAuthorizationErrorUnsupportedCountry = 13,
/// An unexpected error occurred. Check your application’s local logs for further information, and contact Square developer support if the issue persists.
  SQMPAuthorizationErrorUnexpected = 14,
};
static NSString * _Nonnull const SQMPAuthorizationErrorDomain = @"MobilePaymentsSDKAPI.AuthorizationError";

@protocol SQMPLocation;
enum SQMPAuthorizationState : NSUInteger;
@protocol SQMPAuthorizationStatusObservable;

/// Manages Square Seller account authorization.
SWIFT_PROTOCOL_NAMED("AuthorizationManager")
@protocol SQMPAuthorizationManager
/// The currently authorized location.
@property (nonatomic, readonly, strong) id <SQMPLocation> _Nullable location;
/// The current authorization status.
@property (nonatomic, readonly) enum SQMPAuthorizationState state;
/// Authorize the SDK with a Square access token.
/// \param accessToken A Square access token
///
/// \param locationID The identifier of the location which will be associated with payments processed via the SDK
///
/// \param completion The completion handler called when an authorization finishes with the result of the authorization.
///
- (void)authorizeWithAccessToken:(NSString * _Nonnull)accessToken locationID:(NSString * _Nonnull)locationID completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Deauthorize the Square Seller Account.
/// note:
/// This call is asynchronous, wait for the completionHandler to fire before calling <code>Authorizationmanager.authorize</code>.
/// \param completion The completion handler called when deauthorization finishes.
///
- (void)deauthorizeWithCompletion:(void (^ _Nonnull)(void))completion;
/// Add an observer to be notified if the authorizationState did change
/// \param authorizationStateObserver the observer to be notified of changes.
///
- (void)add:(id <SQMPAuthorizationStatusObservable> _Nonnull)authorizationStateObserver;
/// Removes the observer to be notified if the authorizationState did change
/// \param authorizationStateObserver the observer to be notified of changes.
///
- (void)remove:(id <SQMPAuthorizationStatusObservable> _Nonnull)authorizationStateObserver;
@end

/// The current state of the SDKs authorization
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPAuthorizationState, "AuthorizationState", open) {
/// Mobile Payments SDK is not currently authorized with a Square Seller account
  SQMPAuthorizationStateNotAuthorized = 0,
/// Mobile Payments SDK is currently attempting authorization with a Square Seller Account
  SQMPAuthorizationStateAuthorizing = 1,
/// Mobile Payments SDK is currently authorized with a Square Seller Account
  SQMPAuthorizationStateAuthorized = 2,
};


/// Observer for receiving updates when authorization state changes.
SWIFT_PROTOCOL_NAMED("AuthorizationStateObserver")
@protocol SQMPAuthorizationStatusObservable
/// Callback invoked when the authorization state changes.
- (void)authorizationStateDidChange:(enum SQMPAuthorizationState)authorizationState;
@end

@class SQMPCardInputMethods;

/// Observer for receiving changes for the available card input methods.
SWIFT_PROTOCOL_NAMED("AvailableCardInputMethodsObserver")
@protocol SQMPAvailableCardInputMethodsObserver
/// Callback invoked to notify the application of a change in the available card input methods.
- (void)availableCardInputMethodsDidChange:(SQMPCardInputMethods * _Nonnull)cardInputMethods;
@end


enum SQMPCardBrand : NSUInteger;
enum SQMPCardCoBrand : NSUInteger;

/// The card’s non-confidential details.
SWIFT_PROTOCOL_NAMED("Card")
@protocol SQMPCard <NSObject>
/// Unique ID for this card. Generated by Square.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// The card’s brand (such as VISA).
@property (nonatomic, readonly) enum SQMPCardBrand cardBrand;
/// The card’s CoBrand (such as Afterpay).
@property (nonatomic, readonly) enum SQMPCardCoBrand coBrand;
/// The last 4 digits of the card number.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// The expiration month of the associated card as an integer between 1 and 12.
@property (nonatomic, readonly) NSUInteger expMonth;
/// The four-digit year of the card’s expiration date.
@property (nonatomic, readonly) NSUInteger expYear;
/// The name of the cardholder.
@property (nonatomic, readonly, copy) NSString * _Nullable cardholderName;
/// Dictionary representation of a Card
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull dictionaryRepresentation;
@end

/// The card’s brand (such as VISA).
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPCardBrand, "CardBrand", open) {
/// The card used was unable to be identified
  SQMPCardBrandUnknown = 0,
/// Visa
  SQMPCardBrandVisa = 1,
/// Mastercard
  SQMPCardBrandMastercard = 2,
/// American Express
  SQMPCardBrandAmericanExpress = 3,
/// Discover
  SQMPCardBrandDiscover = 4,
/// Discover Diners
  SQMPCardBrandDiscoverDiners = 5,
/// JCB
  SQMPCardBrandJcb = 6,
/// China Union Pay
  SQMPCardBrandChinaUnionPay = 7,
/// Square Gift Card
  SQMPCardBrandSquareGiftCard = 8,
/// Square Capital Card
  SQMPCardBrandSquareCapitalCard = 9,
/// Interac
  SQMPCardBrandInterac = 10,
/// eftpos
  SQMPCardBrandEftpos = 11,
/// felica
  SQMPCardBrandFelica = 12,
/// ebt
  SQMPCardBrandEbt = 13,
/// The card used was unable to be identifier
  SQMPCardBrandOtherBrand = 14,
};

/// The card’s cobrand (such as Afterpay).
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPCardCoBrand, "CardCoBrand", open) {
/// The card used was unable to be identified
  SQMPCardCoBrandUnknown = 0,
/// AfterPay
  SQMPCardCoBrandAfterpay = 1,
/// No cobrand
  SQMPCardCoBrandNone = 2,
};

/// The entry method used to provide a card’s details.
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPCardEntryMethod, "CardEntryMethod", open) {
/// The card was swiped through a Square reader or Square stand.
  SQMPCardEntryMethodSwiped = 0,
/// The card information was keyed manually.
  SQMPCardEntryMethodKeyed = 1,
/// The card was processed via EMV with a Square reader.
  SQMPCardEntryMethodEmv = 2,
/// The buyer’s card details were already on file with Square.
  SQMPCardEntryMethodOnFile = 3,
/// The card was processed via a contactless (i.e., NFC) transaction with a Square reader.
  SQMPCardEntryMethodContactless = 4,
/// The card entry method is unknown.
  SQMPCardEntryMethodUnknown = 5,
};


/// A handle for a card.
SWIFT_PROTOCOL_NAMED("CardHandle")
@protocol SQMPCardHandle
/// Unique ID for this card handle.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Brand of the card
@property (nonatomic, readonly) enum SQMPCardBrand brand;
/// Name of the cardholder
@property (nonatomic, readonly, copy) NSString * _Nullable cardholderName;
/// The entry method from which the handle was obtained from.
@property (nonatomic, readonly) enum SQMPCardEntryMethod entryMethod;
/// Determines if this swiped card has been stored in memory for
/// continuing a payment at a later point.
/// Note that swiped cards are only held for a certain period
/// before being automatically deleted. Initiating a new payment
/// when a prior card handle is active will also render the handle invalid.
@property (nonatomic, readonly) BOOL isSwipedCardStored;
/// Last 4 of the card number
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
@end


/// Methods of payments that might be supported by readers
SWIFT_CLASS_NAMED("CardInputMethods")
@interface SQMPCardInputMethods : NSObject
/// Raw value of the input method.
@property (nonatomic, readonly) NSInteger rawValue;
/// Magnetic strip swiping, as supported by the magstripe reader.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SQMPCardInputMethods * _Nonnull swipe;)
+ (SQMPCardInputMethods * _Nonnull)swipe SWIFT_WARN_UNUSED_RESULT;
/// Chip card insertion, or “dip”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SQMPCardInputMethods * _Nonnull chip;)
+ (SQMPCardInputMethods * _Nonnull)chip SWIFT_WARN_UNUSED_RESULT;
/// NFC contactless payment, or “tap”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SQMPCardInputMethods * _Nonnull contactless;)
+ (SQMPCardInputMethods * _Nonnull)contactless SWIFT_WARN_UNUSED_RESULT;
/// Convenience initializer to create <code>CardInputMethods</code> from an array of values.
- (nonnull instancetype)init:(NSArray<SQMPCardInputMethods *> * _Nonnull)cardInputMethods;
/// Convenience initializer to create <code>CardInputMethods</code> with no value.
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
/// convenience method added because contains is not accessible in objective c
/// \param inputMethods Input methods to check against
///
///
/// returns:
/// <code>true</code> if self contains the inputMethods passed in the parameter
- (BOOL)contains:(SQMPCardInputMethods * _Nonnull)inputMethods SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Current value in String form.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Indicates there are no available methods to take a payment.
@property (nonatomic, readonly) BOOL isEmpty;
@end

/// The state of a card inside of a reader.
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPCardInsertionStatus, "CardInsertionStatus", open) {
/// Indicates a card has been inserted into the reader.
  SQMPCardInsertionStatusInserted = 0,
/// Indicates no card is currently in the reader.
  SQMPCardInsertionStatusNotInserted = 1,
/// Indicates card insertion status is unknown (Default for magstripe readers).
  SQMPCardInsertionStatusUnknown = 2,
};


/// Base type of a source to create a payment with
SWIFT_PROTOCOL_NAMED("PaymentSource")
@protocol SQMPPaymentSource
/// Determines if payment source is valid.
- (BOOL)validate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("CardOnFilePaymentSource")
@interface SQMPCardOnFilePaymentSource : NSObject <SQMPPaymentSource>
/// The identifier of the card on file that we are charging.
@property (nonatomic, readonly, copy) NSString * _Nonnull cardID;
- (nonnull instancetype)initWithCardID:(NSString * _Nonnull)cardID OBJC_DESIGNATED_INITIALIZER;
/// Determines if card on file payment source is valid.
- (BOOL)validate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SQMPCardPaymentStatus : NSUInteger;

/// Details about a successful card payment.
SWIFT_PROTOCOL_NAMED("CardPaymentDetails")
@protocol SQMPCardPaymentDetails <NSObject>
/// The status of the card payment.
@property (nonatomic, readonly) enum SQMPCardPaymentStatus status;
/// Details about the card used in this payment, including the brand and last four digits of the card number.
@property (nonatomic, readonly, strong) id <SQMPCard> _Nullable card;
/// The entry method used to provide a card’s details.
@property (nonatomic, readonly) enum SQMPCardEntryMethod entryMethod;
/// For EMV payments, identifies the EMV application used for the payment.
@property (nonatomic, readonly, copy) NSString * _Nullable applicationIdentifier;
/// For EMV payments, the human-readable name of the EMV application used for the payment.
@property (nonatomic, readonly, copy) NSString * _Nullable applicationName;
/// Status code returned by the card issuer that describes the payment’s authorization status.
@property (nonatomic, readonly, copy) NSString * _Nullable authResultCode;
/// Dictionary representation of a CardPaymentDetails
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull dictionaryRepresentation;
@end

/// The status of the card payment.
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPCardPaymentStatus, "CardPaymentStatus", open) {
/// The payment status is unknown.
  SQMPCardPaymentStatusUnknown = 0,
/// The card transaction has been authorized but not yet captured.
  SQMPCardPaymentStatusAuthorized = 1,
/// The card transaction was authorized and subsequently captured (i.e., completed).
  SQMPCardPaymentStatusCaptured = 2,
/// The card transaction was authorized and subsequently voided (i.e., canceled)
  SQMPCardPaymentStatusVoided = 3,
/// The card transaction failed
  SQMPCardPaymentStatusFailed = 4,
};

/// Represents a currency
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPCurrency, "Currency", open) {
  SQMPCurrencyAUD = 0,
  SQMPCurrencyCAD = 1,
  SQMPCurrencyEUR = 2,
  SQMPCurrencyGBP = 3,
  SQMPCurrencyJPY = 4,
  SQMPCurrencyUSD = 5,
  SQMPCurrencyUnknown = 6,
};

/// Defines the actions to be applied to the payment when the <code>delayDuration</code> has elapsed. The action must be CANCEL or COMPLETE.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPDelayAction, "DelayAction", open) {
/// Cancels the payment after the <code>delayDuration</code> has elapsed.
  SQMPDelayActionCancel = 0,
/// Completes the payment after the <code>delayDuration</code> has elapsed.
  SQMPDelayActionComplete = 1,
};

/// The environment the SDK has been initialized in.
/// This value indicates the environment of the SDK based on the Square application ID used during SDK initialization - <code>.production</code> for a production ID and <code>.sandbox</code> for a sandbox ID.
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPEnvironment, "Environment", open) {
/// Production environment
  SQMPEnvironmentProduction = 0,
/// Sandbox environment
  SQMPEnvironmentSandbox = 1,
};


SWIFT_CLASS_NAMED("HouseAccountPaymentSource")
@interface SQMPHouseAccountPaymentSource : NSObject <SQMPPaymentSource>
/// Payment source token associated with house account
@property (nonatomic, readonly, copy) NSString * _Nonnull paymentSourceID;
- (nonnull instancetype)initWithPaymentSourceID:(NSString * _Nonnull)paymentSourceID OBJC_DESIGNATED_INITIALIZER;
/// Determines if house account payment source is valid.
- (BOOL)validate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Instructs the SDK to begin a Keyed Payment
SWIFT_CLASS_NAMED("KeyedCardPaymentSource")
@interface SQMPKeyedCardPaymentSource : NSObject <SQMPPaymentSource>
/// Determines if keyed card payment source is valid.
- (BOOL)validate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Locations represent the sources of orders and fulfillments for businesses.
SWIFT_PROTOCOL_NAMED("Location")
@protocol SQMPLocation <NSObject>
/// The id of the location
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The name of the location
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Merchant category code
@property (nonatomic, readonly, copy) NSString * _Nonnull mcc;
/// The currency supported at the location
@property (nonatomic, readonly) enum SQMPCurrency currency;
@end


/// Represents an amount of money.
SWIFT_PROTOCOL_NAMED("MoneyAmount")
@protocol SQMPMoneyAmount <NSObject>
/// The amount of money in the smallest denomination of the currency.
/// For example, when <code>currencyCode</code> is <code>.usd</code>, the amount is in cents.
@property (nonatomic, readonly) NSUInteger amount;
/// The currency code.
@property (nonatomic, readonly) enum SQMPCurrency currency;
/// String representation of the object
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Represents an amount of money.
SWIFT_CLASS_NAMED("Money")
@interface SQMPMoney : NSObject <SQMPMoneyAmount>
@property (nonatomic) NSUInteger amount;
@property (nonatomic) enum SQMPCurrency currency;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithAmount:(NSUInteger)amount currency:(enum SQMPCurrency)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SQMPMoney (SWIFT_EXTENSION(MobilePaymentsSDKAPI))
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end



/// The card’s non-confidential details.
SWIFT_PROTOCOL_NAMED("OfflineCard")
@protocol SQMPOfflineCard <NSObject>
/// Unique ID for this card. Generated by Square.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// The card’s brand (such as VISA).
@property (nonatomic, readonly) enum SQMPCardBrand cardBrand;
/// The last 4 digits of the card number.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// The name of the cardholder.
@property (nonatomic, readonly, copy) NSString * _Nullable cardholderName;
/// Dictionary representation of a Card
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull dictionaryRepresentation;
@end


/// Details about a card payment taken offline.
SWIFT_PROTOCOL_NAMED("OfflineCardPaymentDetails")
@protocol SQMPOfflineCardPaymentDetails <NSObject>
/// Details about the card used in this payment, including the brand and last four digits of the card number.
@property (nonatomic, readonly, strong) id <SQMPOfflineCard> _Nullable card;
/// The entry method used to provide a card’s details.
@property (nonatomic, readonly) enum SQMPCardEntryMethod entryMethod;
/// For EMV payments, identifies the EMV application used for the payment.
@property (nonatomic, readonly, copy) NSString * _Nullable applicationIdentifier;
/// For EMV payments, the human-readable name of the EMV application used for the payment.
@property (nonatomic, readonly, copy) NSString * _Nullable applicationName;
/// Dictionary representation of an OfflineCardPaymentDetails
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull dictionaryRepresentation;
@end

@class NSDate;
enum SQMPSourceType : NSInteger;

/// A representation of a payment. See <a href="https://developer.squareup.com/reference/square/payments-api/create-payment">Payments API</a> for more information.
SWIFT_PROTOCOL_NAMED("Payment")
@protocol SQMPPayment <NSObject>
/// The server-side ID for this payment.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// Timestamp of when the payment was created.
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdAt;
/// Timestamp of when the payment was last updated.
@property (nonatomic, readonly, copy) NSDate * _Nonnull updatedAt;
/// The amount of money to accept for this payment, not including <code>tipMoney</code>.
@property (nonatomic, readonly, strong) id <SQMPMoneyAmount> _Nonnull amountMoney;
/// The amount designated as a tip, in addition to <code>amountMoney</code>
@property (nonatomic, readonly, strong) id <SQMPMoneyAmount> _Nullable tipMoney;
/// The amount of money the developer is taking as a fee for facilitating the payment on behalf of the seller.
@property (nonatomic, readonly, strong) id <SQMPMoneyAmount> _Nullable appFeeMoney;
/// The total money for the payment, including <code>amountMoney</code> and <code>tipMoney</code>.
@property (nonatomic, readonly, strong) id <SQMPMoneyAmount> _Nonnull totalMoney;
/// The location ID to associate with the payment. If not specified, the default location is used.
@property (nonatomic, readonly, copy) NSString * _Nullable locationID;
/// Associate a previously created order with this payment
@property (nonatomic, readonly, copy) NSString * _Nullable orderID;
/// A user-defined ID to associate with the payment. You can use this field to associate the payment to an entity in an external system. For example, you might specify an order ID that is generated by a third-party shopping cart.
@property (nonatomic, readonly, copy) NSString * _Nullable referenceID;
/// The source type for this payment.
@property (nonatomic, readonly) enum SQMPSourceType sourceType;
@end

enum SQMPOfflineStatus : NSUInteger;

/// A representation of an offline payment
SWIFT_PROTOCOL_NAMED("OfflinePayment")
@protocol SQMPOfflinePayment <SQMPPayment>
/// The local ID for this payment.
/// note:
/// This is used only for fetching an <code>OfflinePayment</code> locally from <code>OfflinePaymentQueue</code> and not from <code>v2/payments</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull localID;
/// Indicates the current payment status.
@property (nonatomic, readonly) enum SQMPOfflineStatus status;
/// Non-confidential details about the source. Only populated if the card was accepted.
@property (nonatomic, readonly, strong) id <SQMPOfflineCardPaymentDetails> _Nullable cardDetails;
/// Timestamp of when the payment was uploaded for processing.
@property (nonatomic, readonly, copy) NSDate * _Nullable uploadedAt;
/// Dictionary representation of all of the properties of an <code>OfflinePayment</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull dictionaryRepresentation;
@end


/// Mechanism to interact with payments taken while offline
SWIFT_PROTOCOL_NAMED("OfflinePaymentQueue")
@protocol SQMPOfflinePaymentQueue
/// Calculates the total sum of all queued offline payments for the authorized Square account and location from the device’s storage.
/// If amount is nil, there was a problem retrieving the amount.  Check the error for more details.
/// Use <code>PaymentSettings.offlineTotalStoredAmountLimit</code> to find the maximum amount allowed.
/// \param completion The completion handler called when the total amount is calculated, or an error occurs.
///
- (void)getTotalStoredPaymentsAmountWithCompletion:(void (^ _Nonnull)(id <SQMPMoneyAmount> _Nullable, NSError * _Nullable))completion;
/// Retrieves all offline payments stored on the device for the current authorized Square account and location.
/// \param completion The completion handler called when the payments are retrieved, or an error occurs.
///
- (void)getPayments:(void (^ _Nonnull)(NSArray<id <SQMPOfflinePayment>> * _Nonnull, NSError * _Nullable))completion;
@end

/// Errors relating to the Offline Payment Queue failing.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPOfflinePaymentQueueError, "OfflinePaymentQueueError", open) {
/// Mobile Payments SDK is not currently authorized with a Square Seller account. Use the AuthorizationManager to authorize a Square account.
  SQMPOfflinePaymentQueueErrorNotAuthorized = 0,
/// An unexpected error occurred. Check your application’s local logs for further information, and contact Square developer support if the issue persists.
  SQMPOfflinePaymentQueueErrorUnexpected = 1,
/// Your application is attempting to take an offline payment while authorized with a Square Sandbox account. Offline payments are not supported in Sandbox. Reauthorize with a production account to take offline payments.
  SQMPOfflinePaymentQueueErrorUnsupportedSandboxEnvironment = 2,
};
static NSString * _Nonnull const SQMPOfflinePaymentQueueErrorDomain = @"MobilePaymentsSDKAPI.OfflinePaymentQueueError";

/// The status of an <code>OfflinePayment</code>.
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPOfflineStatus, "OfflineStatus", open) {
/// The status is unknown; verification could not be completed.
  SQMPOfflineStatusUnknown = 0,
/// Payment is retained on the local device; awaiting upload by Mobile Payments SDK.
  SQMPOfflineStatusQueued = 1,
/// Payment has been successfully uploaded to the Square Server; funds are now secured.
  SQMPOfflineStatusUploaded = 2,
/// Upload of payment failed due to an unrecoverable error.
  SQMPOfflineStatusFailedToUpload = 3,
/// Processing of offline payment by Square Server failed, possibly due to card decline or other transaction issue.
  SQMPOfflineStatusFailedToProcess = 4,
/// Offline payment has been successfully processed by Square Server and is now visible in the merchant dashboard.
  SQMPOfflineStatusProcessed = 5,
};

enum SQMPPaymentStatus : NSUInteger;

/// A representation of an online payment
SWIFT_PROTOCOL_NAMED("OnlinePayment")
@protocol SQMPOnlinePayment <SQMPPayment>
/// The ID of the customer associated with the payment. Required if the <code>sourceID</code> refers to a card on file created using the Customers API.
@property (nonatomic, readonly, copy) NSString * _Nullable customerID;
/// The ID of the team member associated with the payment.
@property (nonatomic, readonly, copy) NSString * _Nullable teamMemberID;
/// An optional note to be entered by the developer when creating a payment
@property (nonatomic, readonly, copy) NSString * _Nullable note;
/// Indicates the current payment status.
@property (nonatomic, readonly) enum SQMPPaymentStatus status;
/// Non-confidential details about the source. Only populated if the <code>sourceType</code> is <code>CARD</code>.
@property (nonatomic, readonly, strong) id <SQMPCardPaymentDetails> _Nullable cardDetails;
/// Dictionary representation of all of the properties of an <code>OnlinePayment</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull dictionaryRepresentation;
@end


/// Represents an ongoing pairing with Square Reader and provides a way to cancel it
SWIFT_PROTOCOL_NAMED("PairingHandle")
@protocol SQMPPairingHandle
/// Stop pairing with nearby Square Readers. Mobile Payments SDK will automatically stop pairing after a reader is paired.
///
/// returns:
/// <code>true</code> if a pairing was canceled.
- (BOOL)stop;
@end


/// Errors relating to a payment failing.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPPaymentError, "PaymentError", open) {
/// The local device time is out of sync with the server time, which could lead to inaccurate payment reporting. Check your device’s time and attempt your action again.
  SQMPPaymentErrorDeviceTimeDoesNotMatchServerTime = 0,
/// The idempotency key used for this payment has already been used. Review previous payments to ensure you are not processing a duplicate payment, and then try again with a new idempotency key.
  SQMPPaymentErrorIdempotencyKeyReused = 1,
/// The <code>PaymentParameters</code> provided were invalid. Check the request details and try the payment again.
  SQMPPaymentErrorInvalidPaymentParameters = 2,
/// The payment source provided did not match the <code>AlternatePaymentMethod</code> given. Check the request details and try the payment again.
  SQMPPaymentErrorInvalidPaymentSource = 3,
/// Location permission has not been granted to your application. Prompt the user for location access and try the payment again.
  SQMPPaymentErrorLocationPermissionNeeded = 4,
/// The merchant using your application is not a part of the offline payments alpha experience, and cannot take offline payments with the Mobile Payments SDK.
  SQMPPaymentErrorMerchantNotOptedIntoOfflineProcessing = 5,
/// Mobile Payments SDK is not currently authorized with a Square Seller account. Use the <code>AuthorizationManager</code> to authorize a Square account.
  SQMPPaymentErrorNotAuthorized = 6,
/// Mobile Payments SDK could not connect to the network and the payment could not be completed.
  SQMPPaymentErrorNoNetwork = 7,
/// Your application has exceeded the total amount available to be stored on the device. Wait until connection is restored and stored payments have processed before taking more offline payments.
  SQMPPaymentErrorOfflineStoredAmountExceeded = 8,
/// Your application is attempting an offline payment that exceeds the limit for a single transaction. Try again with a lower payment amount.
  SQMPPaymentErrorOfflineTransactionAmountExceeded = 9,
/// A payment is already in progress. Cancel the current payment, or wait for it to complete, then try the new payment again.
  SQMPPaymentErrorPaymentAlreadyInProgress = 10,
/// Your application is attempting to take an offline payment while authorized with a Square Sandbox account. Offline payments are not supported in Sandbox. Reauthorize with a production account to take offline payments.
  SQMPPaymentErrorSandboxUnsupportedForOfflineProcessing = 11,
/// Mobile Payments SDK timed out while awaiting a payment. Try the payment again.
  SQMPPaymentErrorTimedOut = 12,
/// <code>PaymentManager.startPayment</code> was used in an unexpected or unsupported way. Check your local logs and try the payment again.
  SQMPPaymentErrorUnexpected = 13,
/// The user entered an unsupported mode while a payment was in process (for example, split screen mode is not supported in Mobile Payments SDK). Try the payment again.
  SQMPPaymentErrorUnsupportedMode = 14,
};
static NSString * _Nonnull const SQMPPaymentErrorDomain = @"MobilePaymentsSDKAPI.PaymentError";


/// Represents an ongoing payment and provides a way to cancel the payment or enter card manually.
SWIFT_PROTOCOL_NAMED("PaymentHandle")
@protocol SQMPPaymentHandle
/// The associated payment that has begun
@property (nonatomic, readonly, strong) id <SQMPPayment> _Nonnull payment;
/// Additional Payment Methods available to create a Payment
@property (nonatomic, readonly, copy) NSArray<id <SQMPAdditionalPaymentMethod>> * _Nonnull additionalPaymentMethods;
/// Checks if the active payment can be canceled. Returns <code>true</code> if a payment can be canceled.
@property (nonatomic, readonly) BOOL isPaymentCancelable;
/// Attempts to cancel the active payment. Returns <code>true</code> if a payment was canceled.
- (BOOL)cancelPayment;
@end

@class SQMPPaymentParameters;
@class SQMPPromptParameters;
@class UIViewController;
@protocol SQMPPaymentManagerDelegate;

/// The <code>PaymentManager</code> handles creating a new payment.
SWIFT_PROTOCOL_NAMED("PaymentManager")
@protocol SQMPPaymentManager
/// Used to start a payment.
/// \param paymentParameters provide to modify amount, currency and other options found within the <a href="https://developer.squareup.com/reference/square/payments-api/create-payment">V2/Payments endpoint</a>
///
/// \param promptParameters provide to select which payment prompt mode is used and which additional payment methods are allowed for the payment
///
/// \param viewController the view controller to present the payment flow on-top of
///
/// \param delegate the PaymentManagerDelegate where notifications will be received
///
///
/// returns:
/// A  PaymentHandle optionally that can be used to interact with the active payment if it has started successfully
- (id <SQMPPaymentHandle> _Nullable)startPayment:(SQMPPaymentParameters * _Nonnull)paymentParameters promptParameters:(SQMPPromptParameters * _Nonnull)promptParameters from:(UIViewController * _Nonnull)viewController delegate:(id <SQMPPaymentManagerDelegate> _Nonnull)delegate;
/// Add an observer to be notified if the available charge methods have changed.
/// \param availableCardInputMethodsObserver the observer to be notified of changes.
///
- (void)add:(id <SQMPAvailableCardInputMethodsObserver> _Nonnull)availableCardInputMethodsObserver;
/// Removes the observer to be notified if the available charge methods have changed.
/// \param availableCardInputMethodsObserver the observer to be removed.
///
- (void)remove:(id <SQMPAvailableCardInputMethodsObserver> _Nonnull)availableCardInputMethodsObserver;
/// Used to determine the possible charge methods.
///
/// returns:
/// The possible charge options.
@property (nonatomic, readonly, strong) SQMPCardInputMethods * _Nonnull availableCardInputMethods;
/// Used to interact with all of the payments taken while offline.
///
/// returns:
/// An OfflinePaymentQueue to get details about the payments taken while in offline mode.
@property (nonatomic, readonly, strong) id <SQMPOfflinePaymentQueue> _Nonnull offlinePaymentQueue;
@end


/// The delegate provided to a <code>startPayment</code> call must adopt the <code>PaymentManagerDelegate</code> protocol
SWIFT_PROTOCOL_NAMED("PaymentManagerDelegate")
@protocol SQMPPaymentManagerDelegate
@optional
/// This method is called when payment has been started, but no further action has been taken.
/// \param paymentManager The payment manager.
///
/// \param payment Returns an instance of <code>Payment</code> which contains information about the ongoing payment
///
- (void)paymentManager:(id <SQMPPaymentManager> _Nonnull)paymentManager didStart:(id <SQMPPayment> _Nonnull)payment;
@required
/// This method is called when payment has succeeded and the payment flow has been dismissed.
/// You can now start a new payment.
/// \param paymentManager The payment manager.
///
/// \param payment The payment.
///
- (void)paymentManager:(id <SQMPPaymentManager> _Nonnull)paymentManager didFinish:(id <SQMPPayment> _Nonnull)payment;
/// This method is called when a payment error occurs.
/// \param paymentManager The payment manager. 
///
/// \param error The error that occured. 
/// @see <code>PaymentError</code> for a list of error codes.
///
- (void)paymentManager:(id <SQMPPaymentManager> _Nonnull)paymentManager didFail:(id <SQMPPayment> _Nonnull)payment withError:(NSError * _Nonnull)error;
/// This method is called after the payment has been canceled programatically or cancellation has been
/// initiated by the user within the payment flow. You can now start a new payment.
/// \param paymentManager The payment manager.
///
- (void)paymentManager:(id <SQMPPaymentManager> _Nonnull)paymentManager didCancel:(id <SQMPPayment> _Nonnull)payment;
@optional
/// Optional - This method is called when payment has succeeded and the payment flow is about to be dismissed.
/// Use this method to prepare your UI before the payment flow is dismissed.
/// \param paymentManager The payment manager.
///
/// \param payment The completed payment
///
- (void)paymentManager:(id <SQMPPaymentManager> _Nonnull)paymentManager willFinish:(id <SQMPPayment> _Nonnull)payment;
/// Optional - This method is called when payment cancellation is about to be completed. If the payment flow
/// has been presented, use this method to prepare your UI before the payment flow is dismissed.
/// \param paymentManager The payment manager.
///
- (void)paymentManager:(id <SQMPPaymentManager> _Nonnull)paymentManager willCancel:(id <SQMPPayment> _Nonnull)payment;
@end

enum SQMPProcessingMode : NSInteger;

/// Parameters to describe a single payment made using Mobile Payments SDK.
SWIFT_CLASS_NAMED("PaymentParameters")
@interface SQMPPaymentParameters : NSObject
/// A unique string that identifies this CreatePayment request. Keys can be any valid string
/// but must be unique for every CreatePayment request.
/// note:
/// The number of allowed characters might be less than the stated maximum, if multi-byte
/// characters are used.
/// For more information, see <a href="https://developer.squareup.com/reference/square/payments-api/create-payment#request__property-idempotency_key">Idempotency</a>.
@property (nonatomic, copy) NSString * _Nonnull idempotencyKey;
/// Timestamp this payment started on device.
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdAt;
/// If set to true and charging a Square Gift Card, a payment may be returned with <code>amountMoney</code> equal to less than what was requested. Example, a request for $20 when charging a Square Gift Card with balance of $5 will result in an <code>APPROVED</code> payment of $5. You may choose to prompt the buyer for an additional payment to cover the remainder, or cancel the gift card payment. Cannot be <code>true</code> when <code>autocomplete = true</code>. If this parameter is passed as true but the buyer selected a payment method for which partial authorization does not apply eg: cash then this parameter is ignored. For more information, see <a href="/payments-api/take-payments#partial-payment-gift-card">Partial amount with Square gift cards</a>.
/// Defaults to <code>false</code>
@property (nonatomic) BOOL acceptPartialAuthorization;
/// If set to true, this payment will be completed when possible. If set to false, this payment will be held in an approved state until either explicitly completed (captured) or canceled (voided). For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments#delayed-payments">Delayed Payments</a>.
@property (nonatomic) BOOL autocomplete;
/// The duration of time after the payment’s creation when Square either cancels or completes the payment. This automatic action applies only to payments that don’t reach a terminal state (<code>COMPLETED</code>, <code>CANCELED</code>, or <code>FAILED</code>) before the <code>delayDuration</code> time period.
/// The type of action (either <code>cancel</code> or <code>complete</code>) is defined by the <code>delayAction</code> parameter, and defaults to <code>cancel</code>.
/// note:
/// This feature is only supported for card payments. This parameter is only respected for a delayed capture payment (<code>autocomplete=false</code>).
/// note:
/// If a card is dipped or tapped, and <code>autocomplete=true</code>, a default delay duration of 10 minutes will be set.
/// This parameter should be specified as a time duration in seconds, expressed as a <code>TimeInterval</code>, with a minimum value of 60 seconds. If the duration specified is 0 seconds, the default values listed below will be used.
/// <ul>
///   <li>
///     Default and maximum values:
///     <ul>
///       <li>
///         For card present payments, the default and maximum value is 36 hours, or 129,600 seconds.
///       </li>
///       <li>
///         For card not present payments (such as manual card entry), the default and maximum value is 7 days, or 604,800 seconds.
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic) NSTimeInterval delayDuration;
/// The action to apply to the payment when the <code>delayDuration</code> has elapsed. Defaults to <code>cancel</code>.
/// note:
/// Setting this to <code>complete</code> while the <code>orderID</code> parameter is set will fail validation.
/// To learn more about this behavior, see the <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold">Delayed Capture: Time threshold</a> section.
@property (nonatomic) enum SQMPDelayAction delayAction;
/// The amount of money to accept for this payment, not including <code>tipMoney</code>
@property (nonatomic, strong) id <SQMPMoneyAmount> _Nonnull amountMoney;
/// The amount designated as a tip, in addition to <code>amountMoney</code>
@property (nonatomic, strong) id <SQMPMoneyAmount> _Nullable tipMoney;
/// The amount of money the developer is taking as a fee for facilitating the payment on behalf of the seller. Cannot be more than 90% of the total amount of the Payment.
@property (nonatomic, strong) id <SQMPMoneyAmount> _Nullable appFeeMoney;
/// Total amount of the payment.
/// Equal to the sum of <code>amountMoney</code> and <code>tipMoney</code>
@property (nonatomic, readonly, strong) id <SQMPMoneyAmount> _Nonnull totalMoney;
/// The location ID to associate with the payment. If not specified, the default location is used.
@property (nonatomic, copy) NSString * _Nullable locationID;
/// Optional ID of a previously created Square order to associate with this payment.
/// note:
/// If present, this value must be the ID of a Square order created through the v2/orders API.
/// Your payment will fail with a <code>payment_invalid_parameters</code> error if the order cannot be found.
/// To learn more about how to create an order programmatically, see <a href="https://developer.squareup.com/docs/orders-api/what-it-does">Orders API</a>.
@property (nonatomic, copy) NSString * _Nullable orderID;
/// Optional user-defined ID to associate with the payment. You can use this field to associate the payment to an entity in an external system. For example, you might specify an order ID that is generated by a third-party shopping cart.
@property (nonatomic, copy) NSString * _Nullable referenceID;
/// Optional ID of the customer associated with the payment.
/// This value is required when using a customer’s card on file to create a payment.
@property (nonatomic, copy) NSString * _Nullable customerID;
/// Optional ID of the team member associated with the payment.
/// Previously was <code>employeeID</code>.
@property (nonatomic, copy) NSString * _Nullable teamMemberID;
/// Optional note to be entered by the developer when creating a payment.
@property (nonatomic, copy) NSString * _Nullable note;
/// Optional additional payment information to include on the customer’s card statement as part of statement description.
@property (nonatomic, copy) NSString * _Nullable statementDescriptionIdentifier;
/// Optional card handle that references a stored swiped card. When a valid swiped card is set, the stored card will be used as the payment method,
/// and payment selection will be skipped.
@property (nonatomic, strong) id <SQMPCardHandle> _Nullable cardHandle;
/// Optional processing mode for the payment which determines whether the current payment needs to be processed online or offline.
/// Defaults to online.
@property (nonatomic) enum SQMPProcessingMode processingMode;
- (nonnull instancetype)initWithIdempotencyKey:(NSString * _Nonnull)idempotencyKey amountMoney:(id <SQMPMoneyAmount> _Nonnull)amountMoney OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Read-only settings that provide payment settings based on the current authenticated seller.
SWIFT_PROTOCOL_NAMED("PaymentSettings")
@protocol SQMPPaymentSettings <NSObject>
/// Whether taking payments offline is allowed for the current seller.
@property (nonatomic, readonly) BOOL isOfflineProcessingAllowed;
/// The maximum transaction amount that can be processed in a single offline payment.
/// A payment that exceeds this limit will be ineligible for offline processing.
/// This will be <code>nil</code> if offline processing is not allowed.
@property (nonatomic, readonly, strong) id <SQMPMoneyAmount> _Nullable offlineTransactionAmountLimit;
/// The total allowable amount of all offline payments combined on this device.
/// A payment that would exceed the total limit will be ineligible for offline processing.
/// This will be <code>nil</code> if offline processing is not allowed.
@property (nonatomic, readonly, strong) id <SQMPMoneyAmount> _Nullable offlineTotalStoredAmountLimit;
@end


/// The current status of the payment.
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPPaymentStatus, "PaymentStatus", open) {
/// The status is unknown and could not be verified.
  SQMPPaymentStatusUnknown = 0,
/// The payment is initialized but no action has been taken yet.
  SQMPPaymentStatusInitialized = 1,
/// The payment is approved.
  SQMPPaymentStatusApproved = 2,
/// The payment was completed.
  SQMPPaymentStatusCompleted = 3,
/// The payment was canceled.
  SQMPPaymentStatusCanceled = 4,
/// The payment failed.
  SQMPPaymentStatusFailed = 5,
};

/// Defines the modes for processing payments offline or online.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPProcessingMode, "ProcessingMode", open) {
/// The payment processing mode where network calls are used for real-time payments. This is the default mode.
  SQMPProcessingModeOnlineOnly = 0,
/// The payment processing mode where payments are initially stored locally before synchronizing with the Square servers.
  SQMPProcessingModeOfflineOnly = 1,
/// The payment processing mode where the optimal method is automatically chosen based on network connectivity and the status of the Square servers.
  SQMPProcessingModeAutoDetect = 2,
};

/// Mode to describe which kind of payment prompt will be used for the payment.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPPromptMode, "PromptMode", open) {
/// Use the Square-provided payment prompt UI flow.
  SQMPPromptModeDefault = 0,
/// Build your own payment prompt UI
  SQMPPromptModeCustom = 1,
};


/// Parameters to describe the payment prompt for a single payment made using Mobile Payments SDK.
SWIFT_CLASS_NAMED("PromptParameters")
@interface SQMPPromptParameters : NSObject
/// The <code>PromptMode</code> to use for the payment. Use <code>custom</code> to display your own or use <code>default</code> to use the provided one.
@property (nonatomic, readonly) enum SQMPPromptMode mode;
/// Additional payment methods to be allowed for the payment.
@property (nonatomic, readonly, strong) SQMPAdditionalPaymentMethods * _Nonnull additionalMethods;
- (nonnull instancetype)initWithMode:(enum SQMPPromptMode)mode additionalMethods:(SQMPAdditionalPaymentMethods * _Nonnull)additionalMethods OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SQMPReadCardInfoError, "ReadCardInfoError", open) {
/// ReadCardInfoManager was not authorized properly
  SQMPReadCardInfoErrorNotAuthorized = 0,
/// Indicates an issue with the read card (either card was removed too early, or an additional swipe was requested)
  SQMPReadCardInfoErrorCardError = 1,
/// Indicates there was a reader issue (either reader disconnected or timed out)
  SQMPReadCardInfoErrorReaderError = 2,
/// Indicates an unsupported entry method was used (taps are not supported)
  SQMPReadCardInfoErrorUnsupportedEntryMethod = 3,
/// Indicates an issue storing a swiped card.
  SQMPReadCardInfoErrorStoreError = 4,
/// Indicates an unknown error
  SQMPReadCardInfoErrorUnknown = 5,
};

@protocol SQMPReadCardInfoObserver;

/// The <code>ReadCardInfoManager</code> manages reading swiped or dipped cards without performing a payment.
/// This is useful for reading a cardholder name for autofilling forms, or to place on a receipt or ticket.
SWIFT_PROTOCOL_NAMED("ReadCardInfoManager")
@protocol SQMPReadCardInfoManager
/// Call this to start listening for the next card event (insert or swipe).
/// The info manager will automatically cancel reading after every card event regardless of success or failure.
/// This function can be invoked again to prepare for a subsequent card event (i.e. a retry).
/// \param storeSwipedCard If the card info should be stored for an upcoming payment. This can be set to
/// <code>false</code> if the use case does not involve payment (e.g. getting the cardholder name to search for a customer).
///
/// \param shouldReadPreInsertedCard If a card should be read when it’s inserted before calling this function.
/// This should typically be <code>true</code> for the first read but <code>false</code> for retries to prevent the info manager from
/// repeatedly reading the inserted card.
///
- (void)prepareToReadCardInfoOnceWithStoreSwipedCard:(BOOL)storeSwipedCard shouldReadPreInsertedCard:(BOOL)shouldReadPreInsertedCard;
/// Cancel reading card info events.
- (void)cancelReadingCardInfo;
/// Add an observer to be notified when card info is received after a swipe or insertion.
/// \param readCardInfoObserver the observer to be notified of events.
///
- (void)add:(id <SQMPReadCardInfoObserver> _Nonnull)readCardInfoObserver;
/// Removes the observer to be notified when card info is received after a swipe or insertion.
/// \param readCardInfoObserver the observer to be removed.
///
- (void)remove:(id <SQMPReadCardInfoObserver> _Nonnull)readCardInfoObserver;
@end


SWIFT_PROTOCOL_NAMED("ReadCardInfoObserver")
@protocol SQMPReadCardInfoObserver
/// Indicates card info was read and a successful <code>CardHandle</code> was obtained.
/// \param handle The card handle generated as a response to a swipe or insertion.
///
- (void)readCardInfoDidSucceed:(id <SQMPCardHandle> _Nonnull)handle;
/// Indicates an error with <code>ReadCardInfoManager</code>, either during initialization or during
/// a card read.
/// \param error The error explaining the failure.
///
- (void)readCardInfoDidFail:(enum SQMPReadCardInfoError)error;
@end

/// A coarse representation of the reader’s battery level.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPReaderBatteryLevel, "ReaderBatteryLevel", open) {
/// Battery is extremely low. Plug in device immediately.
  SQMPReaderBatteryLevelCriticallyLow = 0,
/// Battery is low.
  SQMPReaderBatteryLevelLow = 1,
/// Battery is about 50% of it’s full capacity.
  SQMPReaderBatteryLevelMid = 2,
/// Battery is mostly full.
  SQMPReaderBatteryLevelHigh = 3,
/// Battery is completely charged.
  SQMPReaderBatteryLevelFull = 4,
};


/// The current battery status of a reader.
SWIFT_PROTOCOL_NAMED("ReaderBatteryStatus")
@protocol SQMPReaderBatteryStatus <NSObject>
/// A coarse representation of the reader’s battery level
@property (nonatomic, readonly) enum SQMPReaderBatteryLevel level;
/// The battery percentage of the reader (from 0 to 100)
@property (nonatomic, readonly) NSUInteger percentage;
/// Indicates whether or not the battery is charging
@property (nonatomic, readonly) BOOL isCharging;
@end

/// Indicates changes that can occur within a reader
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPReaderChange, "ReaderChange", open) {
/// Indicates a reader’s state has changed.
  SQMPReaderChangeStateDidChange = 0,
/// Indicates the battery level of a reader has updated.
  SQMPReaderChangeBatteryLevelDidChange = 1,
/// Indicates the battery did begin to charge.
  SQMPReaderChangeBatteryDidBeginCharging = 2,
/// Indicates the battery is no longer charging.
  SQMPReaderChangeBatteryDidEndCharging = 3,
/// Indicates the blocking firmware update percentage
  SQMPReaderChangeFirmwareUpdatePercentDidChange = 4,
/// Indicates the connection state of the device has changed.
  SQMPReaderChangeConnectionStateDidChange = 5,
/// Indicates the connection to the device has failed and <code>.state.failureInfo</code> may have more information.
  SQMPReaderChangeConnectionDidFail = 6,
/// Indicates the blocking firmware update did fail
  SQMPReaderChangeFirmwareUpdateDidFail = 7,
/// Indicates a card was inserted.
  SQMPReaderChangeCardInserted = 8,
/// Indicates a card was removed.
  SQMPReaderChangeCardRemoved = 9,
};

enum SQMPReaderConnectionFailureReason : NSUInteger;
enum SQMPReaderConnectionFailureRecoverySuggestion : NSUInteger;

/// Provides additional information if the <code>ReaderConnectionState</code> is <code>.failedToConnect</code>.
SWIFT_PROTOCOL_NAMED("ReaderConnectionFailureInfo")
@protocol SQMPReaderConnectionFailureInfo <NSObject>
/// Specific failure reason.
@property (nonatomic, readonly) enum SQMPReaderConnectionFailureReason failureReason;
/// Hint on recovery options while in this failed state.
@property (nonatomic, readonly) enum SQMPReaderConnectionFailureRecoverySuggestion recoverySuggestion;
/// Localized title for this error suitable to display to a user.
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedTitle;
/// Localized description for this error suitable to display to a user.
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
@end

/// Indicates why a reader might have failed to connect to Square.
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPReaderConnectionFailureReason, "ReaderConnectionFailureReason", open) {
/// The connection was denied by the Square server.
  SQMPReaderConnectionFailureReasonDeniedByServer = 0,
/// A generic error occurred.
  SQMPReaderConnectionFailureReasonGenericError = 1,
/// The maximum number of readers are connected to your application. Unpair some readers and try again.
  SQMPReaderConnectionFailureReasonMaxReadersConnected = 2,
/// The network timed out before the reader could connect. Try your action again.
  SQMPReaderConnectionFailureReasonNetworkTimeout = 3,
/// There was a network error while connecting to Square.
  SQMPReaderConnectionFailureReasonNetworkTransportError = 4,
/// There is no internet connection and the reader could not establish a connection to Square.
  SQMPReaderConnectionFailureReasonNotConnectedToInternet = 5,
/// The connection timed out while updating the reader firmware.
  SQMPReaderConnectionFailureReasonReaderTimeout = 6,
/// An error with the device occurred while attempting to establish a connection to Square.
  SQMPReaderConnectionFailureReasonRevokedByDevice = 7,
/// There was a server error while connecting to Square.
  SQMPReaderConnectionFailureReasonServerError = 8,
/// An unknown error occurred.
  SQMPReaderConnectionFailureReasonUnknown = 9,
};

/// Provides a suggestion for how to attempt to recover from a failed connection.
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPReaderConnectionFailureRecoverySuggestion, "ReaderConnectionFailureRecoverySuggestion", open) {
/// No suggestion. The <code>.localizedTitle</code> and <code>.localizedDescription</code> fields may provide more information on how to recover.
  SQMPReaderConnectionFailureRecoverySuggestionNoSuggestion = 0,
/// The connection issue may be transient and we suggest retrying.
  SQMPReaderConnectionFailureRecoverySuggestionRetry = 1,
/// Reader failed to connect because the user’s account requires activation to process cards.
  SQMPReaderConnectionFailureRecoverySuggestionActivateAccount = 2,
/// There is a specific issue around your account, reader, or device that may require you to contact Square support.
  SQMPReaderConnectionFailureRecoverySuggestionContactSupport = 3,
};

enum SQMPReaderConnectionStatus : NSUInteger;

/// Contains connection information about a Readers current state.
SWIFT_PROTOCOL_NAMED("ReaderConnectionInfo")
@protocol SQMPReaderConnectionInfo <NSObject>
/// Indicates the current state of the connection of a reader.
@property (nonatomic, readonly) enum SQMPReaderConnectionStatus state;
/// Returns information if the connection failed to connect.
@property (nonatomic, readonly, strong) id <SQMPReaderConnectionFailureInfo> _Nullable failureInfo;
@end

/// Indicates the current connection state of a Reader
typedef SWIFT_ENUM_NAMED(NSUInteger, SQMPReaderConnectionStatus, "ReaderConnectionState", open) {
/// Reader is not connected.
  SQMPReaderConnectionStatusNotConnected = 0,
/// Reader attempting a connection to the Square backend.
  SQMPReaderConnectionStatusConnecting = 1,
/// Reader has a successfully established a connection to the Square backend.
  SQMPReaderConnectionStatusConnected = 2,
/// Reader has failed to connect to the Square backend. See <code>.failureInfo</code> for additional context.
  SQMPReaderConnectionStatusFailedToConnect = 3,
};

@class NSError;

/// The firmware info of the reader
SWIFT_PROTOCOL_NAMED("ReaderFirmwareInfo")
@protocol SQMPReaderFirmwareInfo <NSObject>
/// Indicates the version of the firmware installed on reader
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// The firmware update percentage of the reader (from 0 to 100)
@property (nonatomic, readonly) NSUInteger updatePercentage;
/// Indicates the failure reason in case the firmware upgrade failed
@property (nonatomic, readonly, strong) NSError * _Nullable failureReason;
@end

/// Error conditions that arise when pairing reader
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPReaderFirmwareUpdateError, "ReaderFirmwareUpdateError", open) {
/// The connection timed out while updating the reader firmware.
  SQMPReaderFirmwareUpdateErrorConnectionTimeout = 0,
/// The reader firmware failed during an update.
  SQMPReaderFirmwareUpdateErrorFirmwareFailure = 1,
/// Mobile Payments SDK failed to connect to the server while updating the reader firmware.
  SQMPReaderFirmwareUpdateErrorServerCallFailure = 2,
/// An unknown error occurred while updating the reader firmware.
  SQMPReaderFirmwareUpdateErrorUnknownError = 3,
};
static NSString * _Nonnull const SQMPReaderFirmwareUpdateErrorDomain = @"MobilePaymentsSDKAPI.ReaderFirmwareUpdateError";

enum SQMPReaderModel : NSInteger;
enum SQMPReaderState : NSInteger;

/// Information about an individual card reader
SWIFT_PROTOCOL_NAMED("ReaderInfo")
@protocol SQMPReaderInfo <NSObject>
/// Unique ID for this reader.
@property (nonatomic, readonly) NSUInteger id;
/// Human readable name for this reader.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Serial number of this reader.
@property (nonatomic, readonly, copy) NSString * _Nullable serialNumber;
/// Model of this reader.
@property (nonatomic, readonly) enum SQMPReaderModel model;
/// Set of card input methods this reader can support.
@property (nonatomic, readonly, strong) SQMPCardInputMethods * _Nonnull supportedInputMethods;
/// Provides additional context about the connection status of the reader.
@property (nonatomic, readonly, strong) id <SQMPReaderConnectionInfo> _Nonnull connectionInfo;
/// Current status of the firmware info.
@property (nonatomic, readonly, strong) id <SQMPReaderFirmwareInfo> _Nullable firmwareInfo;
/// The current state of the reader.
@property (nonatomic, readonly) enum SQMPReaderState state;
/// Current status of the reader battery.
@property (nonatomic, readonly, strong) id <SQMPReaderBatteryStatus> _Nullable batteryStatus;
/// True if the reader has lights and supports blinking.
@property (nonatomic, readonly) BOOL isBlinkable;
/// True if the reader’s bluetooth connection can be forgotten.
@property (nonatomic, readonly) BOOL isForgettable;
/// True if the reader’s session can be retried.
@property (nonatomic, readonly) BOOL isConnectionRetryable;
/// Indicates if the reader has a card inserted.
@property (nonatomic, readonly) enum SQMPCardInsertionStatus cardInsertionStatus;
@end

@protocol SQMPReaderPairingDelegate;
@protocol SQMPReaderObserver;

/// The <code>ReaderManager</code> handles interactions with Square card readers, including pairing Bluetooth readers, getting the current set of available readers, and observing changes in available readers.
SWIFT_PROTOCOL_NAMED("ReaderManager")
@protocol SQMPReaderManager
/// The array of connected card readers.
@property (nonatomic, readonly, copy) NSArray<id <SQMPReaderInfo>> * _Nonnull readers;
/// Indicates pairing has started
@property (nonatomic, readonly) BOOL isPairingInProgress;
/// Start pairing with a nearby Square Reader.
/// Pairing will automatically time out after one minute. Pairing will automatically stop after a reader has been connected. To pair another reader, call this method after the first reader finishes pairing.
/// \param delegate The object to notify when a reader is paired or fails to pair
///
///
/// returns:
/// <code>PairingHandle</code> object to be used to stop the payment if the pairing has started successfully.
- (id <SQMPPairingHandle> _Nullable)startPairingWith:(id <SQMPReaderPairingDelegate> _Nonnull)delegate;
/// Link device’s Apple ID to the merchant id by agreeing to Tap to Pay terms and conditions.
- (void)linkTapToPayReaderWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Relink merchant id to a different Apple ID by agreeing to Tap to Pay terms and conditions.
- (void)relinkTapToPayReaderWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Indicates if the device’s Apple ID is already linked with the merchant id.
/// If false, must call linkTapToPayReader(completion:) to link account
- (void)isTapToPayReaderLinkedWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Indicates if the device supports Apple Tap to Pay
- (BOOL)isTapToPayReaderSupported SWIFT_WARN_UNUSED_RESULT;
/// Forget the reader if the reader supports the capability.
- (void)forget:(id <SQMPReaderInfo> _Nonnull)readerInfo;
/// Blink the reader if the reader supports the capability.
- (void)blink:(id <SQMPReaderInfo> _Nonnull)readerInfo;
/// Attempts to retry the connection with Square’s servers. Listen for connection state changes in <code>ReaderObserver</code>
- (void)retryConnection:(id <SQMPReaderInfo> _Nonnull)readerInfo;
/// Add an observer to be notified of changes to available card readers.
/// \param readerObserver The object to notify when readers change, are added, or are removed.
///
- (void)add:(id <SQMPReaderObserver> _Nonnull)readerObserver;
/// Remove an observer to stop its being notified of changes to available card readers.
/// \param readerObserver An existing reader observer to be removed.
///
- (void)remove:(id <SQMPReaderObserver> _Nonnull)readerObserver;
@end

/// The hardware model of the reader.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPReaderModel, "ReaderModel", open) {
/// <a href="https://squareup.com/shop/hardware/us/en/products/magstripe-reader">Square Reader for magstripe</a>
  SQMPReaderModelMagstripe = 0,
/// <a href="https://squareup.com/shop/hardware/us/en/products/chip-credit-card-reader-with-nfc">Square Reader for contactless and chip</a>
  SQMPReaderModelContactlessAndChip = 1,
/// <a href="https://squareup.com/shop/hardware/us/en/products/ipad-pos-stand-credit-card-reader">Square Stand</a>
  SQMPReaderModelStand = 2,
/// [Embedded Card Reader] (https://developer.apple.com/tap-to-pay/)
  SQMPReaderModelEmbedded = 3,
/// An unknown Square Reader was connected.
  SQMPReaderModelUnknown = 4,
};


/// Callback invoked to notify the application of a change to a single card reader.
SWIFT_PROTOCOL_NAMED("ReaderObserver")
@protocol SQMPReaderObserver
/// Indicates a reader was added and made available for use.
- (void)readerWasAdded:(id <SQMPReaderInfo> _Nonnull)readerInfo;
/// Indicates a reader was removed and can no longer be used
- (void)readerWasRemoved:(id <SQMPReaderInfo> _Nonnull)readerInfo;
/// Indicates a property of the reader has been updated.
- (void)readerDidChange:(id <SQMPReaderInfo> _Nonnull)readerInfo change:(enum SQMPReaderChange)change;
@end


/// The delegate provided to a <code>startPairing</code> call must adopt the <code>ReaderPairingDelegate</code> protocol.
SWIFT_PROTOCOL_NAMED("ReaderPairingDelegate")
@protocol SQMPReaderPairingDelegate
/// Indicates that reader pairing started.
- (void)readerPairingDidBegin;
/// Indicates that reader pairing was successful.
- (void)readerPairingDidSucceed;
/// Indicates that reader pairing failed.
/// \param error The error indicating why the pairing failed.
///
- (void)readerPairingDidFailWith:(NSError * _Nonnull)error;
@end

/// Error conditions that arise when pairing reader
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPReaderPairingError, "ReaderPairingError", open) {
/// Bluetooth was disabled by the user. Prompt them to enable Bluetooth and try again.
  SQMPReaderPairingErrorBluetoothDisabled = 0,
/// The Bluetooth connection is not ready. Wait and try again.
  SQMPReaderPairingErrorBluetoothNotReady = 1,
/// This device does not support Bluetooth.
  SQMPReaderPairingErrorBluetoothNotSupported = 2,
/// Bluetooth access has been denied by the user. You should check for Bluetooth permission before trying to pair a reader.
  SQMPReaderPairingErrorBluetoothPermissionDenied = 3,
/// Mobile Payments SDK could not determine your application’s Bluetooth permission. You should check for Bluetooth permission before trying to pair a reader.
  SQMPReaderPairingErrorBluetoothPermissionNotDetermined = 4,
/// Your application’s Bluetooth access has been restricted in Settings. You should check for Bluetooth permission before trying to pair a reader.
  SQMPReaderPairingErrorBluetoothPermissionRestricted = 5,
/// Mobile Payments SDK could not determine your application’s Bluetooth permission. You should check for Bluetooth permission before trying to pair a reader.
  SQMPReaderPairingErrorBluetoothPermissionUnknownCase = 6,
/// An unknown Bluetooth error occurred.
  SQMPReaderPairingErrorBluetoothResetting = 7,
/// An unknown Bluetooth error occurred.
  SQMPReaderPairingErrorBluetoothUnknownError = 8,
/// An unknown Bluetooth error occurred. Prompt the user to go to the Bluetooth settings on their device and “forget” the reader they are attempting to pair, then re-open your app and try pairing again.
  SQMPReaderPairingErrorBondingRemoved = 9,
/// Mobile Payments SDK failed to connect to the reader. Try pairing the reader again.
  SQMPReaderPairingErrorFailedToConnect = 10,
/// Mobile Payments SDK is not currently authorized with a Square Seller account. Use the AuthorizationManager to authorize a Square account.
  SQMPReaderPairingErrorNotAuthorized = 11,
/// Pairing a Bluetooth reader is not supported in the Square sandbox environment. Please use a production account to authorize and test pairing.
  SQMPReaderPairingErrorSandboxNotSupported = 12,
/// Bluetooth reader pairing isn’t supported on iOS simulators. Test on a physical device with Square hardware or use a mock reader with a Square sandbox account in the simulator.
  SQMPReaderPairingErrorSimulatorNotSupported = 13,
/// There is already a reader pairing in progress. Wait for that to complete and try again.
  SQMPReaderPairingErrorReaderAlreadyPairing = 14,
/// Mobile Payments SDK timed out while trying to pair with nearby readers. Try the pairing again.
  SQMPReaderPairingErrorTimedOut = 15,
/// This version of Mobile Payments SDK is not compatible with the reader. Update the SDK, or use a compatible reader device.
  SQMPReaderPairingErrorUpdateRequired = 16,
};
static NSString * _Nonnull const SQMPReaderPairingErrorDomain = @"MobilePaymentsSDKAPI.ReaderPairingError";

/// The reader’s state.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPReaderState, "ReaderState", open) {
/// The reader is unavailable, but known.
/// If a reader is not connected to a power supply, the reader may fall asleep and needs to be woken up by pressing the power button.
  SQMPReaderStateDisconnected = 0,
/// The reader is actively being connected
  SQMPReaderStateConnecting = 1,
/// The reader is connected and ready to be used.
  SQMPReaderStateReady = 2,
/// The reader is being updated and cannot be used.
  SQMPReaderStateUpdatingFirmware = 3,
/// Connection to the reader failed; forget it and try again. <code>.connectionState</code> may contain more details.
  SQMPReaderStateFailedToConnect = 4,
/// This reader is unusable; contact support.
  SQMPReaderStateDisabled = 5,
};

@protocol SQMPSettingsManager;

/// Manages initialization and lifecycle for the Mobile Payments SDK.
/// warning:
///
/// You must initialize Mobile Payments SDK before attempting any other operation.
/// All methods in this class must be called from the main thread.
SWIFT_PROTOCOL_NAMED("SDKManager")
@protocol SQMPSDKManager <NSObject>
/// Manages authorization with the Square seller account.
@property (nonatomic, readonly, strong) id <SQMPAuthorizationManager> _Nonnull authorizationManager;
/// Manages creating a payment.
@property (nonatomic, readonly, strong) id <SQMPPaymentManager> _Nonnull paymentManager;
/// Manages reading card info without creating a payment.
@property (nonatomic, readonly, strong) id <SQMPReadCardInfoManager> _Nonnull readCardInfoManager;
/// Manages pairing new readers and provides access to previously paired readers.
@property (nonatomic, readonly, strong) id <SQMPReaderManager> _Nonnull readerManager;
/// Manages presenting, retrieving, and updating SDK settings.
@property (nonatomic, readonly, strong) id <SQMPSettingsManager> _Nonnull settingsManager;
@end


/// SDK-level settings containing general information about the Mobile Payments SDK.
SWIFT_PROTOCOL_NAMED("SDKSettings")
@protocol SQMPSDKSettings <NSObject>
/// The current environment of the Mobile Payments SDK - either <code>.production</code> or <code>.sandbox</code>.
@property (nonatomic, readonly) enum SQMPEnvironment environment;
/// The current version of the Mobile Payments SDK.
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@end


/// The <code>SettingsManager</code> manages presenting, retrieving, and updating SDK settings.
SWIFT_PROTOCOL_NAMED("SettingsManager")
@protocol SQMPSettingsManager
/// SDK-level settings containing general information about the Mobile Payments SDK, such as
/// the SDK’s current version or environment.
@property (nonatomic, readonly, strong) id <SQMPSDKSettings> _Nonnull sdkSettings;
/// Read-only settings that provide information about payment settings
/// based on the current authenticated location and merchant.
@property (nonatomic, readonly, strong) id <SQMPPaymentSettings> _Nonnull paymentSettings;
/// Used to display the Mobile Payments SDK Settings Screen.
/// \param viewController The view controller to present the settings screen on top of.
///
/// \param completion The completion handler called when the settings screen finishes being presented.
/// If there was an error while trying to present the settings screen, it will be
/// returned in the completion handler.
///
- (void)presentSettingsWithViewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end

/// The source type for the payment.
typedef SWIFT_ENUM_NAMED(NSInteger, SQMPSourceType, "SourceType", open) {
  SQMPSourceTypeUnknown = 0,
  SQMPSourceTypeCard = 1,
  SQMPSourceTypeCash = 2,
  SQMPSourceTypeExternal = 3,
  SQMPSourceTypeWallet = 4,
  SQMPSourceTypeBankAccount = 5,
  SQMPSourceTypeSquareAccount = 6,
};


SWIFT_CLASS_NAMED("TapToPayPaymentSource")
@interface SQMPTapToPayPaymentSource : NSObject <SQMPPaymentSource>
/// Determines if tap to pay  payment source is valid.
- (BOOL)validate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SQMPTapToPayReaderError, "TapToPayReaderError", open) {
/// Account is already linked for Tap to Pay. No need to link again
  SQMPTapToPayReaderErrorAlreadyLinked = 0,
/// Device is banned or merchant is blocked by Apple from using Tap to Pay
  SQMPTapToPayReaderErrorBanned = 1,
/// Specific Apple ID is unable to be linked for Tap to Pay
  SQMPTapToPayReaderErrorLinkingFailed = 2,
/// User canceled linking/relinking operation
  SQMPTapToPayReaderErrorLinkingCanceled = 3,
/// SDK could not generate a valid JWT token for PaymentCardReader API
  SQMPTapToPayReaderErrorInvalidToken = 4,
/// Mobile Payments SDK is not currently authorized with a Square Seller account.
  SQMPTapToPayReaderErrorNotAuthorized = 5,
/// Tap To Pay Reader is not available
  SQMPTapToPayReaderErrorNotAvailable = 6,
/// Mobile Payments SDK could not connect to the network.
  SQMPTapToPayReaderErrorNoNetwork = 7,
/// Network response returned an error
  SQMPTapToPayReaderErrorNetworkError = 8,
/// Tap To Pay Reader received an error
  SQMPTapToPayReaderErrorOther = 9,
/// The device does not have a passcode set
  SQMPTapToPayReaderErrorPasscodeDisabled = 10,
/// An unexpected error has occured
  SQMPTapToPayReaderErrorUnexpected = 11,
/// The device’s OS is not supported for Tap to Pay Operation
  SQMPTapToPayReaderErrorUnsupportedOSVersion = 12,
/// The device is not supported for Tap to Pay Operation
  SQMPTapToPayReaderErrorUnsupportedDeviceModel = 13,
};
static NSString * _Nonnull const SQMPTapToPayReaderErrorDomain = @"MobilePaymentsSDKAPI.TapToPayReaderError";


/// Generates a currency from a ISO 4217 currency code
SWIFT_EXTERN enum SQMPCurrency SQMPCurrencyFromCurrencyCode(NSString * _Nonnull string) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(Currency.init(_:));


/// The raw description of the card brand.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromAuthorizationState(enum SQMPAuthorizationState authorizationState) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:AuthorizationState.description(self:));


/// The raw description of the card brand.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromCardBrand(enum SQMPCardBrand cardBrand) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:CardBrand.description(self:));


/// The raw description of the card cobrand.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromCardCoBrand(enum SQMPCardCoBrand coBrand) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:CardCoBrand.description(self:));


/// The raw description of the card entry method.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromCardEntryMethod(enum SQMPCardEntryMethod cardEntryMethod) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:CardEntryMethod.description(self:));


/// The raw description of the payment status.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromCardPaymentStatus(enum SQMPCardPaymentStatus cardPaymentStatus) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:CardPaymentStatus.description(self:));


/// Gets the corresponding ISO 4217 currency code
SWIFT_EXTERN NSString * _Nonnull SQMPCurrencyCodeFromCurrency(enum SQMPCurrency currency) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:Currency.currencyCode(self:));


/// Raw description of the delay action.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromDelayAction(enum SQMPDelayAction delayAction) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:DelayAction.description(self:));


/// The raw description of the environment
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromEnvironment(enum SQMPEnvironment environment) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:Environment.description(self:));


/// Raw description of the current payment status.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromOfflineStatus(enum SQMPOfflineStatus offlineStatus) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:OfflineStatus.description(self:));


/// Raw description of the current payment status.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromPaymentStatus(enum SQMPPaymentStatus paymentStatus) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:PaymentStatus.description(self:));


/// Raw description of the processing mode.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromProcessingMode(enum SQMPProcessingMode processingMode) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:ProcessingMode.description(self:));


/// Raw description of the payment prompt mode.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromPromptMode(enum SQMPPromptMode promptMode) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:PromptMode.description(self:));


/// Raw description of ReadCardInfoError.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromReadCardInfoError(enum SQMPReadCardInfoError error) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:ReadCardInfoError.description(self:));


/// Raw description of the current state of the reader.
SWIFT_EXTERN NSString * _Nonnull SQMPStringFromReaderState(enum SQMPReaderState readerState) SWIFT_WARN_UNUSED_RESULT NS_SWIFT_NAME(getter:ReaderState.description(self:));

#endif

#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

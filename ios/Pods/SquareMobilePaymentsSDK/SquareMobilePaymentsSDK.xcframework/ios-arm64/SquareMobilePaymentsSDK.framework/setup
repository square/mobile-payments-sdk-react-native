#!/bin/bash

set -ex

# Unpack frameworks
FRAMEWORK_NAME="SquareMobilePaymentsSDK"
MAIN_FRAMEWORKS_DIR="$BUILT_PRODUCTS_DIR/$FRAMEWORKS_FOLDER_PATH"
NESTED_FRAMEWORKS_DIR="$MAIN_FRAMEWORKS_DIR/$FRAMEWORK_NAME.framework/Frameworks"

# Don't choke if projects or targets have spaces in the name
OLDIFS=$IFS
IFS=$(echo "")

if [ -d "$NESTED_FRAMEWORKS_DIR" ]; then
  # Handle all nested frameworks that are fat frameworks
  find "$NESTED_FRAMEWORKS_DIR" -name '*.framework' ! -path '*.xcframework/*' -type d | while read -r FRAMEWORK; do
    rm -rf "$MAIN_FRAMEWORKS_DIR/$(basename "$FRAMEWORK")/"
    mv -f "$FRAMEWORK/" "$MAIN_FRAMEWORKS_DIR"
  done

  # Handle all nested frameworks that are xcframeworks
  find "$NESTED_FRAMEWORKS_DIR" -name '*.xcframework' -type d | while read -r XCFRAMEWORK; do

    # $SDK_NAMES is an environment variable set by the xcodebuild process
    # Possible values can be seen by running `xcodebuild -showsdks`
    for SDK in $SDK_NAMES; do

      # Only allow iphoneos and iphonesimulator SDKs
      if ! [[ $SDK =~ .*iphone.* ]]; then
        echo "Unable to setup $(basename "$XCFRAMEWORK"). Only building against iOS SDKs is supported at the moment."
        exit 1
      fi

      FIND_COMMAND="find '$XCFRAMEWORK' -name '*.framework' -type d"
      if [[ $SDK =~ .*simulator.* ]]; then
        FIND_COMMAND="$FIND_COMMAND -path '*-simulator/*'"
      else
        FIND_COMMAND="$FIND_COMMAND ! -path '*-simulator/*'"
      fi

      eval "$FIND_COMMAND" | while read -r ARCH_FRAMEWORK; do
        rm -rf "$MAIN_FRAMEWORKS_DIR/$(basename "$ARCH_FRAMEWORK")/"
        mv -f "$ARCH_FRAMEWORK/" "$MAIN_FRAMEWORKS_DIR"
        rm -rf "$(dirname "$ARCH_FRAMEWORK")"
      done
    done

    # Cleanup unused SDK slices of xcframework
    rm -rf "$XCFRAMEWORK"
  done

  # If the nested framework directory does not contain any further framework binaries then clean it up
  if [ -z "$(find "$NESTED_FRAMEWORKS_DIR" -name "*.framework" -type d)" ]; then
    rm -rf "$NESTED_FRAMEWORKS_DIR"
  fi
fi

IFS=$OLDIFS

READER_SDK_FRAMEWORKS=("CorePaymentCard.framework" "SquareReader.framework" "LCRCore.framework")
# Remove unused architectures if archiving
if [ "$ACTION" = "install" ]; then
  FRAMEWORKS_PATH="${TARGET_BUILD_DIR}/${WRAPPER_NAME}/Frameworks"

  for FRAMEWORK in "${READER_SDK_FRAMEWORKS[@]}"; do
    FRAMEWORK_EXECUTABLE_NAME=$(defaults read "$FRAMEWORKS_PATH/$FRAMEWORK/Info.plist" CFBundleExecutable)
    FRAMEWORK_EXECUTABLE_PATH="$FRAMEWORKS_PATH/$FRAMEWORK/$FRAMEWORK_EXECUTABLE_NAME"
    # echo "Executable is $FRAMEWORK_EXECUTABLE_PATH"

    # Check the binary is universal before extracting it
    if (file "$FRAMEWORK_EXECUTABLE_PATH" | grep universal); then
      EXTRACTED_ARCHS=()

      # $ARCHS is an environment variable set by the xcodebuild process.
      for ARCH in $ARCHS; do
        # echo "Extracting $ARCH from $FRAMEWORK_EXECUTABLE_NAME"
        lipo -extract "$ARCH" "$FRAMEWORK_EXECUTABLE_PATH" -o "$FRAMEWORK_EXECUTABLE_PATH-$ARCH"
        EXTRACTED_ARCHS+=("$FRAMEWORK_EXECUTABLE_PATH-$ARCH")
      done

      # echo "Merging extracted architectures: ${ARCHS}"
      lipo -o "$FRAMEWORK_EXECUTABLE_PATH-merged" -create "${EXTRACTED_ARCHS[@]}"
      rm "${EXTRACTED_ARCHS[@]}"

      # echo "Replacing original executable with thinned version"
      rm "$FRAMEWORK_EXECUTABLE_PATH"
      mv "$FRAMEWORK_EXECUTABLE_PATH-merged" "$FRAMEWORK_EXECUTABLE_PATH"
    fi
  done
fi

# Don't choke if projects or targets have spaces in the name
OLDIFS=$IFS
IFS=$(echo "")

# Delete this script if archiving
if [ "$ACTION" = "install" ]; then
  rm -- "$0"
fi

# Codesign
ALL_MOBILE_PAYMENTS_SDK_FRAMEWORKS=("${READER_SDK_FRAMEWORKS[@]}")
ALL_MOBILE_PAYMENTS_SDK_FRAMEWORKS+=(${FRAMEWORK_NAME})
for FRAMEWORK in "${ALL_MOBILE_PAYMENTS_SDK_FRAMEWORKS[@]}"; do
  find "${CODESIGNING_FOLDER_PATH}/Frameworks" -name "${FRAMEWORK}" | while read -r FILENAME; do
    codesign --force --sign "${EXPANDED_CODE_SIGN_IDENTITY}" "$FILENAME"
    if [ $? != 0 ]; then
      echo "error: Code signing failed."
      exit 1
    fi
  done
done


IFS=$OLDIFS
